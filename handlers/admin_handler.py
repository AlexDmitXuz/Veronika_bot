from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton

from keyboards.admin_keyboard import (
    admin_menu_keyboard, admin_menu_edit_value,
    admin_status, admin_promo_type, admin_menu_back
)
from keyboards.main_menu_keyboard import main_menu_keyboard
from keyboards.booking_keyboard import type_shoot_keyboard

from database.db import get_all_sessions, update_session_field, archive_old_sessions
from fsm.fsm_admin_esit_session import EditSession, BroadcastStates
from utils.calendar_kb import get_calendar
from utils.time_kb import time_booking
from config import load_config
from datetime import datetime

config = load_config()
admin = config.admin_id

router = Router()

@router.callback_query(lambda c: c.data == "admin")
async def admin_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–ú–µ–Ω—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞:", reply_markup=admin_menu_keyboard())

@router.callback_query(lambda c: c.data == "admin_view_requests")
async def view_requests(callback: CallbackQuery):
    sessions = await get_all_sessions()
    if not sessions:
        await callback.message.edit_text("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=admin_menu_keyboard())
        return

    response = "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:\n\n"
    for s in sessions:
        response += (
            f"ID: {s['id']}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{s['username']} (ID: {s['user_id']})\n"
            f"–¢–∏–ø —Å—ä–µ–º–∫–∏: {s['session_type']}\n"
            f"–î–∞—Ç–∞: {s['session_date']}\n"
            f"–í—Ä–µ–º—è: {s['session_time']}\n"
            f"–°—Ç–∞—Ç—É—Å: {s['status']}\n\n"
        )
    await callback.message.edit_text(response, reply_markup=admin_menu_keyboard())

@router.callback_query(lambda c: c.data == "admin_edit_requests")
async def edit_session_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=admin_menu_back())
    await state.set_state(EditSession.waiting_for_session_id)

@router.message(EditSession.waiting_for_session_id)
async def process_session_id(message: Message, state: FSMContext):
    session_id = message.text.strip()
    if not session_id.isdigit():
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=admin_menu_back())
        return
    await state.update_data(session_id=int(session_id))
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? (–¥–∞—Ç–∞, –≤—Ä–µ–º—è, —Ç–∏–ø, —Å—Ç–∞—Ç—É—Å)", reply_markup=admin_menu_edit_value())
    await state.set_state(EditSession.waiting_for_field)

@router.callback_query(EditSession.waiting_for_field)
async def process_field_choice(callback: CallbackQuery, state: FSMContext):
    field_map = {
        "admin_edit_date": "–¥–∞—Ç–∞",
        "admin_edit_time": "–≤—Ä–µ–º—è",
        "admin_edit_type_session": "—Ç–∏–ø",
        "admin_edit_status": "—Å—Ç–∞—Ç—É—Å"
    }

    if callback.data not in field_map:
        await callback.message.edit_text("–ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ: –¥–∞—Ç–∞, –≤—Ä–µ–º—è, —Ç–∏–ø –∏–ª–∏ —Å—Ç–∞—Ç—É—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    field = field_map[callback.data]
    await state.update_data(field=field)

    if field == '–¥–∞—Ç–∞':
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=get_calendar())
    elif field == '–≤—Ä–µ–º—è':
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=time_booking())
    elif field == '—Ç–∏–ø':
        await callback.message.edit_text('–ò–∑–º–µ–Ω–∏—Ç–µ —Ç–∏–ø —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏:', reply_markup=type_shoot_keyboard())
    elif field == '—Å—Ç–∞—Ç—É—Å':
        await callback.message.edit_text('–ò–∑–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:', reply_markup=admin_status())

    await state.set_state(EditSession.waiting_for_new_value)

@router.callback_query(EditSession.waiting_for_new_value)
async def process_new_value(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'admin_menu_back':
        await callback.message.edit_text('–ú–µ–Ω—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞:', reply_markup=admin_menu_keyboard())
        await state.clear()
        return

    data = await state.get_data()
    session_id = data["session_id"]
    field = data["field"]

    if callback.data.startswith("time:"):
        new_value = callback.data.split("time:")[1]
    else:
        new_value = callback.data

    field_map = {
        "–¥–∞—Ç–∞": "session_date",
        "–≤—Ä–µ–º—è": "session_time",
        "—Ç–∏–ø": "session_type",
        "—Å—Ç–∞—Ç—É—Å": "status"
    }
    db_field = field_map[field]

    if db_field == "session_date":
        try:
            new_value = datetime.strptime(new_value, "%Y-%m-%d").date()
        except ValueError:
            await callback.message.edit_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –û–∂–∏–¥–∞–µ—Ç—Å—è –ì–ì–ì–ì-–ú–ú-–î–î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

    await update_session_field(session_id, db_field, new_value)
    await archive_old_sessions()
    await callback.message.edit_text(f"–ó–∞—è–≤–∫–∞ {session_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {field} -> {new_value}", reply_markup=admin_menu_keyboard())
    await state.clear()
    await callback.answer()

@router.callback_query(lambda c: c.data == "admin_send_promos")
async def send_promos(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=admin_promo_type())

@router.callback_query(lambda c: c.data == "admin_back")
async def admin_back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    user_id = callback.from_user.id
    admin_id = config.admin_id
    kb = main_menu_keyboard(user_id=user_id, admin_id=admin_id)
    await callback.message.edit_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ üì∏", reply_markup=kb)


@router.callback_query(F.data.startswith("promo_"))
async def choose_recipient_group(callback: CallbackQuery, state: FSMContext, dp_pool):
    target = callback.data.split("_")[1]

    query_map = {
        "all": "SELECT DISTINCT user_id FROM clients",
        "new": "SELECT DISTINCT user_id FROM photo_tg_bot WHERE status = '–Ω–æ–≤–∞—è'",
        "confirmed": "SELECT DISTINCT user_id FROM photo_tg_bot WHERE status = '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞'",
        "done": "SELECT DISTINCT user_id FROM archive_sessions WHERE status = '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞'",
        "canceled": "SELECT DISTINCT user_id FROM archive_sessions WHERE status = '–æ—Ç–º–µ–Ω–µ–Ω–∞'",
    }

    query = query_map.get(target)
    if not query:
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.")
        return

    async with dp_pool.acquire() as conn:
        users = await conn.fetch(query)

    if not users:
        await callback.message.answer("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É.")
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=admin_promo_type())
        return

    user_ids = [record["user_id"] for record in users]

    await state.update_data(recipients=user_ids)
    await callback.message.edit_text(f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(user_ids)}. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(BroadcastStates.waiting_for_broadcast_text)

@router.message(BroadcastStates.waiting_for_broadcast_text)
async def broadcast_text_handler(message: Message, state: FSMContext, dp_pool):
    data = await state.get_data()
    recipients = data.get("recipients", [])
    text = message.text

    if not recipients:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç, —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        return

    success_count = 0
    failed_users = []

    async with dp_pool.acquire() as conn:
        for user_id in recipients:
            try:
                await message.bot.send_message(chat_id=user_id, text=text)
                success_count += 1
            except Exception:
                failed_users.append(user_id)

    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
                         f"–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {len(failed_users)}", reply_markup=admin_menu_keyboard())
    await state.clear()
